var console = initConsole();logToConsole("main function start");main(); console.close();// and we are donefunction main(){var docRef = app.documents.add(                DocumentColorSpace.RGB,                cm2pt (10),                cm2pt (10),                1,                DocumentArtboardLayout.GridByRow,                20.0,                1);docRef.defaultFilled = false;var offset = 5;var yArr = new Array();for(var y = 0; y < docRef.height;y+=5){    yArr.push(y+Math.random()*offset);	}var allPathPoints = new Array();for(var x = 0; x < docRef.width; x += 5){    var pathPoints = new Array();    	for(var i in yArr){//~     $.writeln ("x: " + x + " "+ "y:" + y);//~ 	logToConsole("x" + x + " "+ "y:" + y);		pathPoints.push(new Array (x+ Math.random()*offset,yArr[i]));	}	var piRef = activeDocument.pathItems;	var pathRef = piRef.add();		pathRef.setEntirePath(pathPoints);		pathRef.stroked = true;		pathRef.strokeWidth = 0.25;		pathRef.filled = true;    var s = 55;    var l = (100/(docRef.width +1)) *x;    var hue = (360/(docRef.width +1)) *x;    var rgb = color_hsl2rgb(hue, s, l);	var rgbColor = new RGBColor();		rgbColor.red = rgb.r;		rgbColor.green = rgb.g;		rgbColor.blue = rgb.b;		// 	rgbColor.blue = 0;		// rgbColor.green = 0;		// rgbColor.red = 0;		pathRef.strokeColor = rgbColor;		pathRef.fillColor = rgbColor;	allPathPoints.push({"pp":pathPoints,"color":rgb});	}	checkMatch(docRef,allPathPoints);}function checkMatch(doc, allPathPoints){var diam = 1;var dist = 5;for(var i = 0; i < allPathPoints.length; i++){		for(var k = 0; k < allPathPoints.length; k++){		for(var j = 0; j < allPathPoints[i].pp.length;j++){					if(i!=k){			var cx = allPathPoints[k].pp[j][0];			var cy = allPathPoints[k].pp[j][1];			var sx = allPathPoints[i].pp[j][0];			var sy = allPathPoints[i].pp[j][1];			// if((allPathPoints[k].pp[j][0] > allPathPoints[i].pp[j][0] - dist)&&(allPathPoints[k].pp[j][0]<  allPathPoints[i].pp[j][0]+dist) )			if(checkRange(cx,cy,sx,sy,dist))			{				    // var ell = doc.pathItems.ellipse(allPathPoints[i][j][0] - diam/2, allPathPoints[i][j][1] -diam/2, diam, diam, false,true );				    // ell.strokeWidth = 0.25;				    var myLine = doc.pathItems.add();        			myLine.stroked = true;        			myLine.setEntirePath( new Array(allPathPoints[i].pp[j], allPathPoints[k].pp[j]));        			var rgbColor = new RGBColor();					rgbColor.red = allPathPoints[i].color.r;					rgbColor.green = allPathPoints[i].color.g;					rgbColor.blue = allPathPoints[i].color.b;        			myLine.strokeColor = rgbColor;        			myLine.filled = false;        			myLine.strokeWidth = 0.25;        			// myLine.opacity = o;					myLine.zOrder(ZOrderMethod.SENDTOBACK)				}			}		}		}	}}// this is the same as the function above// but takes much longer// function checkMatchWithOutList(doc){// var diam = 1;// var dist = 1;// for(var i = 0; i < doc.pathItems.length; i++){		// 		for(var j = 0; j < doc.pathItems[i].pathPoints.length;j++){// 		if(i!=0){// 			if((doc.pathItems[i-1].pathPoints[j].anchor.x > doc.pathItems[i].pathPoints[j].anchor.x -dist)&&(doc.pathItems[i-1].pathPoints[j].anchor.x <  doc.pathItems[i].pathPoints[j].anchor.x+dist) ){// 				    var ell = doc.pathItems.ellipse(adoc.pathItems[i].pathPoints[j].anchor.x + diam/2, doc.pathItems[i].pathPoints[j].anchor.y -diam/2, diam, diam, false,true );// 				    ell.strokeWidth = 0.25;// 				}// 			}// 		}// 	}// }function checkRange(cx,cy,sx,sy,dist){	var isinrange= false;if(((cx > sx - dist)&&(cx<  sx+dist))&&((cy > sy - dist)&&(cy<  sy + dist))){isinrange = true;}	return isinrange;}function initConsole(){var console = new Window("palette"); // for logging some data to the screenconsole.prompt = console.add("statictext",[0,0,500,20]);console.show();return console;}function logToConsole(incoming){	try{	console.prompt.text = incoming+"";	}catch(err){		alert("Console is not initalized\n"+err);	}}function cm2pt(val){    var result = val * 28.346;    return result;    }// delay function found here//found here http://www.wer-weiss-was.de/theme157/article1143593.htmlfunction delay(prmSec){prmSec *= 1000;var eDate = null;var eMsec = 0;var sDate = new Date();var sMsec = sDate.getTime();do {eDate = new Date();eMsec = eDate.getTime();} while ((eMsec-sMsec)<prmSec);} function color_hsl2rgb(h, s, l) {	var m1, m2, hue;	var r, g, b	s /=100;	l /= 100;	if (s == 0)		r = g = b = (l * 255);	else {		if (l <= 0.5)			m2 = l * (s + 1);		else			m2 = l + s - l * s;		m1 = l * 2 - m2;		hue = h / 360;		r = color_HueToRgb(m1, m2, hue + 1/3);		g = color_HueToRgb(m1, m2, hue);		b = color_HueToRgb(m1, m2, hue - 1/3);	}	return {r: r, g: g, b: b};}function color_HueToRgb(m1, m2, hue) {	var v;	if (hue < 0)		hue += 1;	else if (hue > 1)		hue -= 1;	if (6 * hue < 1)		v = m1 + (m2 - m1) * hue * 6;	else if (2 * hue < 1)		v = m2;	else if (3 * hue < 2)		v = m1 + (m2 - m1) * (2/3 - hue) * 6;	else		v = m1;	return 255 * v;}